---
// src/pages/checkout/confirmacion.astro - PÁGINA DE CONFIRMACIÓN CORREGIDA
import Layout from '../../components/layout/Layout.astro';
import { supabase } from '../../lib/supabase';
import type { Order } from '../../lib/types';

// ✅ OBTENER PARÁMETROS DE LA URL
const url = new URL(Astro.request.url);
const orderId = url.searchParams.get('order');
const transactionId = url.searchParams.get('transaction');
const status = url.searchParams.get('status');

let order: Order | null = null;
let error: string | null = null;
let pageType: 'success' | 'pending' | 'failed' | 'error' = 'error';

// ✅ FUNCIÓN PARA FORMATEAR PRECIO
const formatPrice = (price: number): string => {
  try {
    const validPrice = typeof price === 'number' && !isNaN(price) && price >= 0 ? price : 0;
    return new Intl.NumberFormat('es-CO', {
      style: 'currency',
      currency: 'COP',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(validPrice);
  } catch (error) {
    return `$${price?.toLocaleString('es-CO') || '0'}`;
  }
};

// ✅ VALIDACIÓN Y CARGA DE ORDEN (CORREGIDA)
if (!orderId) {
  error = 'ID de orden requerido';
  pageType = 'error';
} else {
  try {
    if (!supabase) {
      error = 'Servicio no disponible';
      pageType = 'error';
    } else {
      const { data, error: fetchError } = await supabase
        .from('orders')
        .select('*')
        .eq('id', orderId)
        .single();
    
      if (fetchError) {
        console.error('Error fetching order:', fetchError);
        error = 'Orden no encontrada';
        pageType = 'error';
      } else {
        order = data;
        
        // ✅ CORRECCIÓN: Verificar que order existe antes de acceder a propiedades
        if (order) {
          const paymentStatus = order.payment_status;
          
          // Determinar tipo de página basado en estado de pago
          if (paymentStatus === 'completed') {
            pageType = 'success';
          } else if (paymentStatus === 'pending') {
            pageType = 'pending';
          } else if (paymentStatus === 'failed') {
            pageType = 'failed';
          } else {
            pageType = 'pending'; // Default para nuevas órdenes
          }
          
          console.log('✅ Orden cargada para confirmación:', order.order_number || 'sin número', 'Estado:', paymentStatus || 'sin estado');
        } else {
          error = 'Orden no válida';
          pageType = 'error';
        }
      }
    }
  } catch (err) {
    console.error('Error en confirmación:', err);
    error = 'Error cargando orden';
    pageType = 'error';
  }
}

// ✅ GENERAR TÍTULO Y DESCRIPCIÓN DINÁMICOS
const pageTitle = pageType === 'success' ? 'Pago Exitoso' : 
                  pageType === 'pending' ? 'Pago Pendiente' : 
                  pageType === 'failed' ? 'Pago Fallido' : 'Error';

const pageDescription = pageType === 'success' ? 'Tu pedido ha sido confirmado y será procesado.' :
                        pageType === 'pending' ? 'Tu pago está siendo procesado.' :
                        pageType === 'failed' ? 'Hubo un problema con tu pago.' :
                        'Ocurrió un error procesando tu pedido.';
---

<Layout 
  title={`${pageTitle} - mueblesmartek.com`}
  description={pageDescription}
>
  <div class="min-h-screen bg-gray-50 py-12">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      
      <!-- ✅ ESTADO DE ÉXITO -->
      {pageType === 'success' && order && (
        <div class="text-center mb-8">
          <div class="w-20 h-20 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-6">
            <svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
          </div>
          <h1 class="text-3xl font-bold text-gray-800 mb-2">¡Pago Exitoso!</h1>
          <p class="text-lg text-gray-600 mb-4">Tu pedido ha sido confirmado</p>
          <p class="text-sm text-gray-500">Número de orden: <span class="font-medium text-gray-800">{order.order_number || 'No disponible'}</span></p>
          {transactionId && (
            <p class="text-sm text-gray-500">ID de transacción: <span class="font-medium text-gray-800">{transactionId}</span></p>
          )}
        </div>
      )}

      <!-- ✅ ESTADO PENDIENTE -->
      {pageType === 'pending' && order && (
        <div class="text-center mb-8">
          <div class="w-20 h-20 bg-yellow-500 rounded-full flex items-center justify-center mx-auto mb-6">
            <svg class="w-10 h-10 text-white animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <h1 class="text-3xl font-bold text-gray-800 mb-2">Pago en Proceso</h1>
          <p class="text-lg text-gray-600 mb-4">Tu pago está siendo procesado</p>
          <p class="text-sm text-gray-500">Te notificaremos cuando se confirme</p>
          <p class="text-sm text-gray-500">Número de orden: <span class="font-medium text-gray-800">{order.order_number || 'No disponible'}</span></p>
        </div>
      )}

      <!-- ✅ ESTADO FALLIDO -->
      {pageType === 'failed' && order && (
        <div class="text-center mb-8">
          <div class="w-20 h-20 bg-red-600 rounded-full flex items-center justify-center mx-auto mb-6">
            <svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </div>
          <h1 class="text-3xl font-bold text-gray-800 mb-2">Pago Fallido</h1>
          <p class="text-lg text-gray-600 mb-4">Hubo un problema procesando tu pago</p>
          <p class="text-sm text-gray-500">Número de orden: <span class="font-medium text-gray-800">{order.order_number || 'No disponible'}</span></p>
          
          <div class="mt-6">
            <a href={`/checkout/pagos?order=${order.id}`} 
               class="inline-flex items-center px-6 py-3 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors">
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
              Intentar de Nuevo
            </a>
          </div>
        </div>
      )}

      <!-- ✅ ESTADO DE ERROR -->
      {pageType === 'error' && (
        <div class="text-center mb-8">
          <div class="w-20 h-20 bg-gray-400 rounded-full flex items-center justify-center mx-auto mb-6">
            <svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <h1 class="text-3xl font-bold text-gray-800 mb-2">Error</h1>
          <p class="text-lg text-gray-600 mb-4">{error || 'Ocurrió un error inesperado'}</p>
          
          <div class="mt-6">
            <a href="/checkout" 
               class="inline-flex items-center px-6 py-3 bg-gray-600 text-white rounded-md hover:bg-gray-700 transition-colors">
              Volver al Checkout
            </a>
          </div>
        </div>
      )}

      <!-- ✅ DETALLES DE LA ORDEN (CORREGIDO CON NULL SAFETY) -->
      {order && (
  <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
    <h2 class="text-xl font-semibold text-gray-800 mb-6">Detalles del Pedido</h2>
    
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
      <!-- Información de envío -->
      <div>
        <h3 class="font-medium text-gray-800 mb-4">Información de Envío</h3>
        <div class="space-y-2 text-sm">
          <p><span class="font-medium">Nombre:</span> {order.shipping_address?.full_name || 'No disponible'}</p>
          <p><span class="font-medium">Email:</span> {order.shipping_address?.email || 'No disponible'}</p>
          <p><span class="font-medium">Teléfono:</span> {order.shipping_address?.phone || 'No disponible'}</p>
          <p><span class="font-medium">Dirección:</span> {order.shipping_address?.address_line_1 || 'No disponible'}</p>
          <p><span class="font-medium">Ciudad:</span> {order.shipping_address?.city || 'No disponible'}, {order.shipping_address?.state || 'No disponible'}</p>
          <p><span class="font-medium">Código Postal:</span> {order.shipping_address?.postal_code || 'No disponible'}</p>
        </div>
      </div>

      <!-- Resumen de pago -->
      <div>
        <h3 class="font-medium text-gray-800 mb-4">Resumen de Pago</h3>
        <div class="space-y-2 text-sm">
          <div class="flex justify-between">
            <span>Subtotal:</span>
            <span>{formatPrice(order.subtotal || 0)}</span>
          </div>
          <div class="flex justify-between">
            <span>Envío:</span>
            <span>{(order.shipping_cost || 0) > 0 ? formatPrice(order.shipping_cost || 0) : 'Gratis'}</span>
          </div>
          <div class="flex justify-between">
            <span>IVA:</span>
            <span>{formatPrice(order.tax || 0)}</span>
          </div>
          <div class="border-t pt-2 flex justify-between font-semibold">
            <span>Total:</span>
            <span>{formatPrice(order.total || 0)}</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Lista de productos -->
    {order.items && Array.isArray(order.items) && order.items.length > 0 && (
      <div class="mt-8">
        <h3 class="font-medium text-gray-800 mb-4">Productos</h3>
        <div class="space-y-4">
          {order.items.map((item: any, index: number) => (
            <div class="flex items-center space-x-4 p-4 bg-gray-50 rounded-md">
              <div class="w-16 h-16 bg-gray-200 rounded-md flex items-center justify-center">
                {item.product_image ? (
                  <img 
                    src={item.product_image} 
                    alt={item.product_name || 'Producto'} 
                    class="w-full h-full object-cover rounded-md"
                  />
                ) : (
                  <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                  </svg>
                )}
              </div>
              <div class="flex-1">
                <h4 class="font-medium text-gray-800">{item.product_name || 'Producto sin nombre'}</h4>
                <p class="text-sm text-gray-600">Cantidad: {item.quantity || 1}</p>
                <p class="text-sm text-gray-600">Precio unitario: {formatPrice(item.price || 0)}</p>
              </div>
              <div class="text-right">
                <p class="font-medium text-gray-800">{formatPrice(item.total || (item.price || 0) * (item.quantity || 1))}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    )}
  </div>
)}
<!-- ✅ AQUÍ ESTÁ EL CIERRE CORRECTO ☝️ -->

<!-- ✅ ACCIONES ADICIONALES (FUERA DEL BLOQUE order) -->
<div class="text-center space-x-4">
  {(pageType === 'success' || pageType === 'pending') && (
    <a href="/" 
       class="inline-flex items-center px-6 py-3 bg-gray-900 text-white rounded-md hover:bg-gray-800 transition-colors">
      <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
      </svg>
      Volver al Inicio
    </a>
  )}
  
  <a href="/productos" 
     class="inline-flex items-center px-6 py-3 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors">
    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
    </svg>
    Seguir Comprando
  </a>
</div>

      <!-- ✅ INFORMACIÓN ADICIONAL -->
      <div class="mt-12 bg-blue-50 border border-blue-200 rounded-md p-6">
        <h3 class="font-medium text-blue-800 mb-2">¿Qué sigue?</h3>
        <div class="text-sm text-blue-700 space-y-2">
          {pageType === 'success' && (
            <>
              <p>• Recibirás un email de confirmación en los próximos minutos</p>
              <p>• Tu pedido será procesado en 1-2 días hábiles</p>
              <p>• Te notificaremos cuando tu pedido sea enviado</p>
              <p>• El tiempo de entrega es de 3-5 días hábiles</p>
            </>
          )}
          {pageType === 'pending' && (
            <>
              <p>• Tu pago está siendo verificado</p>
              <p>• Te notificaremos por email cuando se confirme</p>
              <p>• Este proceso puede tomar hasta 24 horas</p>
            </>
          )}
          {pageType === 'failed' && (
            <>
              <p>• Puedes intentar el pago nuevamente</p>
              <p>• Verifica que tu tarjeta tenga fondos suficientes</p>
              <p>• Contacta a tu banco si el problema persiste</p>
            </>
          )}
        </div>
        
        <div class="mt-4 pt-4 border-t border-blue-200">
          <p class="text-sm text-blue-700">
            ¿Necesitas ayuda? 
            <a href="/contacto" class="font-medium underline hover:no-underline">Contáctanos</a>
            o llama al <span class="font-medium">(+57) 2 234-5678</span>
          </p>
        </div>
      </div>
    </div>
  </div>
</Layout>

<!-- ✅ SCRIPT MEJORADO PARA AUTO-ACTUALIZACIÓN -->
{pageType === 'pending' && (
  <script>
    // Auto-recargar cada 60 segundos (no 30) para verificar actualizaciones de estado
    let refreshCount = 0;
    const maxRefreshes = 10; // Máximo 10 recargas (10 minutos)
    
    function scheduleRefresh() {
      if (refreshCount < maxRefreshes) {
        setTimeout(() => {
          refreshCount++;
          console.log(`🔄 Auto-refresh ${refreshCount}/${maxRefreshes}`);
          window.location.reload();
        }, 60000); // 60 segundos
      } else {
        console.log('🛑 Máximo de auto-refreshes alcanzado');
      }
    }
    
    // Iniciar el auto-refresh
    scheduleRefresh();
  </script>
)}