---
// src/pages/productos.astro - PRODUCTOS MARTEK
import Layout from '../components/layout/Layout.astro';
import { getProducts } from '../lib/supabase';
import type { Product } from '../lib/types';

// Obtener productos de la base de datos
let products: Product[] = [];

try {
  products = await getProducts();
  console.log(`üõèÔ∏è ${products.length} bases cargadas`);
} catch (error) {
  console.error('‚ùå Error cargando productos:', error);
}
---

<Layout 
  title="Bases para Camas - Martek" 
  description="Bases de cama de alta calidad con m√°s de 45 a√±os de experiencia"
>
  <div class="min-h-screen bg-gray-50 py-12">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      
      <!-- Header -->
      <div class="text-center mb-12">
        <h1 class="text-4xl font-bold text-gray-800 mb-4">Nuestras Bases</h1>
        <p class="text-xl text-gray-600 max-w-2xl mx-auto">
          Bases de cama dise√±adas para brindar soporte y durabilidad excepcional
        </p>
      </div>

      <!-- Productos Grid - 2 COLUMNAS -->
      {products.length > 0 ? (
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 max-w-4xl mx-auto">
          {products.map(product => (
            <div class="bg-white rounded-lg border border-gray-200 overflow-hidden hover:shadow-lg transition-all duration-300 group hover:border-red-200">
              
              <!-- Imagen del producto -->
              <div class="relative aspect-[4/3] bg-gray-100 overflow-hidden">
                <a href={`/producto/${product.slug || product.id}`}>
                  {product.image_url ? (
                    <img
                      src={product.image_url}
                      alt={product.name}
                      class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                      loading="lazy"
                    />
                  ) : (
                    <div class="w-full h-full bg-gray-100 flex items-center justify-center">
                      <svg class="w-16 h-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                      </svg>
                    </div>
                  )}
                </a>

                <!-- Badges -->
                {!product.is_active || product.stock <= 0 ? (
                  <div class="absolute top-3 left-3 bg-red-100 text-red-800 text-xs font-medium px-2 py-1 rounded">
                    Agotado
                  </div>
                ) : product.featured ? (
                  <div class="absolute top-3 left-3 bg-red-600 text-white text-xs font-medium px-2 py-1 rounded">
                    Destacado
                  </div>
                ) : null}
              </div>

              <!-- Informaci√≥n del producto -->
              <div class="p-6">
                <a href={`/producto/${product.slug || product.id}`}>
                  <h3 class="text-xl font-semibold text-gray-800 mb-2 group-hover:text-red-600 transition-colors">
                    {product.name}
                  </h3>
                </a>
                
                {product.description && (
                  <p class="text-gray-600 text-sm mb-4 line-clamp-2">
                    {product.description}
                  </p>
                )}

                <!-- Precio y acci√≥n -->
                <div class="flex items-center justify-between">
                  <div class="space-y-1">
                    <p class="text-2xl font-bold text-gray-800">
                      ${product.price.toLocaleString('es-CO')}
                    </p>
                    <p class="text-sm text-gray-500">Env√≠o incluido</p>
                  </div>
                  
                  <button 
                    onclick={`addProductToCart('${product.id}', '${product.name}', ${product.price}, '${product.image_url || ''}', '${product.category || 'Base'}', this)`}
                    class="bg-red-600 hover:bg-red-700 text-white px-6 py-2 rounded-lg font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2"
                    disabled={!product.is_active || product.stock <= 0}
                  >
                    {!product.is_active || product.stock <= 0 ? 'Agotado' : 'Agregar'}
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <!-- Estado vac√≠o -->
        <div class="text-center py-16">
          <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-gray-800 mb-2">No hay productos disponibles</h3>
          <p class="text-gray-600">Agrega productos desde el panel de administraci√≥n</p>
        </div>
      )}

      <!-- Informaci√≥n adicional -->
      <div class="mt-16 bg-white rounded-lg border p-8 max-w-4xl mx-auto">
        <div class="text-center">
          <h2 class="text-2xl font-bold text-gray-800 mb-4">¬øTienes dudas?</h2>
          <p class="text-gray-600 mb-6 max-w-2xl mx-auto">
            Nuestro equipo est√° listo para asesorarte en la elecci√≥n de tu base ideal.
          </p>
          <a 
            href="/contacto" 
            class="inline-flex items-center px-6 py-3 border border-transparent rounded-md shadow-sm text-base font-medium text-white bg-red-600 hover:bg-red-700 transition-colors"
          >
            Cont√°ctanos
          </a>
        </div>
      </div>
    </div>
  </div>

  <!-- Script para carrito -->
  <script is:inline>
    console.log('üõèÔ∏è P√°gina de bases Martek cargada');

    // ‚úÖ FUNCI√ìN GLOBAL SIN TIPOS
    window.addProductToCart = function(productId, productName, productPrice, productImage, productCategory, buttonElement) {
      console.log('‚ûï Agregando base:', productName);
      
      // ‚úÖ VERIFICACIONES ULTRA SEGURAS
      var canUseButton = false;
      var isDisabled = false;
      
      if (buttonElement) {
        try {
          // Verificar tipo de elemento
          var tagName = buttonElement.tagName;
          if (tagName === 'BUTTON' || tagName === 'INPUT') {
            canUseButton = true;
            // Verificar disabled de forma segura
            if (buttonElement.hasAttribute && buttonElement.hasAttribute('disabled')) {
              isDisabled = true;
            } else if (buttonElement.disabled === true) {
              isDisabled = true;
            }
          }
        } catch (e) {
          console.log('Error verificando bot√≥n, continuando sin modificarlo');
          canUseButton = false;
        }
      }
      
      // No continuar si est√° deshabilitado
      if (isDisabled) {
        return;
      }
      
      var originalText = '';
      if (buttonElement) {
        try {
          originalText = buttonElement.textContent || buttonElement.innerText || '';
        } catch (e) {
          originalText = '';
        }
      }
      
      // Modificar bot√≥n de forma ultra segura
      if (canUseButton && buttonElement) {
        try {
          buttonElement.setAttribute('disabled', 'true');
          if (buttonElement.textContent !== undefined) {
            buttonElement.textContent = 'Agregando...';
          } else if (buttonElement.innerText !== undefined) {
            buttonElement.innerText = 'Agregando...';
          }
          if (buttonElement.className) {
            buttonElement.className = buttonElement.className.replace('bg-red-600', 'bg-gray-400');
          }
        } catch (e) {
          console.log('No se pudo modificar bot√≥n');
        }
      }
      
      try {
        // Validar precio
        var validPrice = 0;
        if (typeof productPrice === 'number' && !isNaN(productPrice)) {
          validPrice = productPrice;
        } else if (typeof productPrice === 'string') {
          var parsed = parseFloat(productPrice);
          if (!isNaN(parsed)) {
            validPrice = parsed;
          }
        }
        
        // Obtener carrito
        var existingCart = localStorage.getItem('martek-cart');
        var cart = [];
        if (existingCart) {
          try {
            cart = JSON.parse(existingCart);
            if (!Array.isArray(cart)) {
              cart = [];
            }
          } catch (e) {
            cart = [];
          }
        }
        
        // Buscar producto existente
        var existingIndex = -1;
        for (var i = 0; i < cart.length; i++) {
          if (cart[i] && cart[i].id === productId) {
            existingIndex = i;
            break;
          }
        }
        
        if (existingIndex > -1) {
          cart[existingIndex].quantity += 1;
        } else {
          cart.push({
            id: productId,
            name: productName || 'Producto',
            price: validPrice,
            image: productImage || '/images/base-default.jpg',
            category: productCategory || 'Base',
            quantity: 1
          });
        }
        
        // Guardar carrito
        localStorage.setItem('martek-cart', JSON.stringify(cart));
        
        // Mostrar feedback
        if (canUseButton && buttonElement) {
          try {
            if (buttonElement.textContent !== undefined) {
              buttonElement.textContent = '‚úì Agregado';
            } else if (buttonElement.innerText !== undefined) {
              buttonElement.innerText = '‚úì Agregado';
            }
            if (buttonElement.className) {
              buttonElement.className = buttonElement.className.replace('bg-gray-400', 'bg-green-600');
            }
            
            setTimeout(function() {
              try {
                buttonElement.removeAttribute('disabled');
                if (buttonElement.textContent !== undefined) {
                  buttonElement.textContent = originalText;
                } else if (buttonElement.innerText !== undefined) {
                  buttonElement.innerText = originalText;
                }
                if (buttonElement.className) {
                  buttonElement.className = buttonElement.className.replace('bg-green-600', 'bg-red-600');
                }
              } catch (e) {
                console.log('Error restaurando bot√≥n');
              }
            }, 2000);
          } catch (e) {
            console.log('Error mostrando feedback');
          }
        }
        
        console.log('‚úÖ Base agregada al carrito');
        
      } catch (error) {
        console.error('‚ùå Error agregando al carrito:', error);
        
        // Restaurar bot√≥n
        if (canUseButton && buttonElement) {
          try {
            buttonElement.removeAttribute('disabled');
            if (buttonElement.textContent !== undefined) {
              buttonElement.textContent = originalText;
            } else if (buttonElement.innerText !== undefined) {
              buttonElement.innerText = originalText;
            }
            if (buttonElement.className) {
              buttonElement.className = buttonElement.className.replace('bg-gray-400', 'bg-red-600');
            }
          } catch (e) {
            console.log('Error restaurando bot√≥n despu√©s de error');
          }
        }
      }
    };

    // ‚úÖ FUNCI√ìN PARA CONFIGURAR BOTONES
    function setupCartButtons() {
      var cartButtons = document.querySelectorAll('[data-action="add-to-cart"]');
      
      for (var i = 0; i < cartButtons.length; i++) {
        var button = cartButtons[i];
        
        // Evitar duplicar listeners
        if (button.getAttribute('data-listener-added') === 'true') {
          continue;
        }
        
        button.addEventListener('click', function(event) {
          event.preventDefault();
          
          var btn = event.target || event.srcElement;
          
          // Obtener datos usando getAttribute (compatible)
          var productId = '';
          var productName = '';
          var productPrice = 0;
          var productImage = '';
          var productCategory = '';
          
          try {
            if (btn && typeof btn.getAttribute === 'function') {
              productId = btn.getAttribute('data-product-id') || '';
              productName = btn.getAttribute('data-product-name') || '';
              var priceStr = btn.getAttribute('data-product-price') || '0';
              productPrice = parseFloat(priceStr) || 0;
              productImage = btn.getAttribute('data-product-image') || '';
              productCategory = btn.getAttribute('data-product-category') || '';
            }
          } catch (e) {
            console.error('Error obteniendo datos del producto:', e);
            return;
          }
          
          // Llamar funci√≥n global
          if (typeof window.addProductToCart === 'function') {
            window.addProductToCart(
              productId,
              productName,
              productPrice,
              productImage,
              productCategory,
              btn
            );
          }
        });
        
        button.setAttribute('data-listener-added', 'true');
      }
    }

    // ‚úÖ INICIALIZAR
    function initializeCart() {
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', setupCartButtons);
      } else {
        setupCartButtons();
      }
      
      // Observer para cambios din√°micos
      if (window.MutationObserver) {
        var observer = new MutationObserver(function(mutations) {
          var shouldSetup = false;
          
          for (var i = 0; i < mutations.length; i++) {
            var mutation = mutations[i];
            if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
              shouldSetup = true;
              break;
            }
          }
          
          if (shouldSetup) {
            setupCartButtons();
          }
        });
        
        observer.observe(document.body, {
          childList: true,
          subtree: true
        });
      }
    }

    // Ejecutar inicializaci√≥n
    initializeCart();
  </script>
</Layout>