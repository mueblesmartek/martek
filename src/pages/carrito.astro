---
// src/pages/carrito.astro - TYPESCRIPT CORREGIDO + FORMATEO DE PRECIOS ARREGLADO
import Layout from '../components/layout/Layout.astro';
---

<Layout 
  title="Carrito de compras - Kamasex.shop" 
  description="Revisa los productos en tu carrito antes de proceder al checkout"
>
  <div class="min-h-screen bg-gray-50 py-12">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      
      <!-- Breadcrumb -->
      <nav class="mb-8" aria-label="Breadcrumb">
        <ol class="flex items-center space-x-2 text-sm text-gray-500">
          <li>
            <a href="/" class="hover:text-gray-700 transition-colors">Inicio</a>
          </li>
          <li>
            <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
            </svg>
          </li>
          <li class="text-gray-800">Carrito</li>
        </ol>
      </nav>

      <!-- T√≠tulo -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-800">Tu carrito</h1>
        <p class="mt-2 text-gray-600">Revisa tus productos antes de proceder al checkout</p>
      </div>

      <!-- Contenedor principal del carrito -->
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        
        <!-- Items del carrito -->
        <div class="lg:col-span-2">
          
          <!-- Carrito vac√≠o -->
          <div id="empty-cart" class="text-center py-12">
            <div class="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l-2.5 5M17 13v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6" />
              </svg>
            </div>
            <h3 class="text-lg font-medium text-gray-800 mb-2">Tu carrito est√° vac√≠o</h3>
            <p class="text-gray-600 mb-6">Agrega algunos productos para comenzar tu compra</p>
            <a 
              href="/productos" 
              class="inline-flex items-center px-6 py-3 border border-transparent rounded-md shadow-sm text-base font-medium text-white bg-red-600 hover:bg-red-700 transition-colors"
            >
              Explorar productos
            </a>
          </div>

          <!-- Items del carrito -->
          <div id="cart-content" class="hidden">
            <div id="cart-items">
              <!-- Los items se renderizan aqu√≠ -->
            </div>
          </div>
        </div>

        <!-- Resumen del pedido -->
        <div class="lg:col-span-1">
          <div id="cart-summary" class="bg-white p-6 rounded-lg border sticky top-4">
            <div class="text-center py-8">
              <p class="text-gray-500">Cargando resumen...</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Productos recomendados -->
      <div class="mt-16">
        <h2 class="text-2xl font-bold text-gray-800 mb-8">Tambi√©n te puede interesar</h2>
        
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
          <div class="bg-white rounded-lg border p-4">
            <div class="w-full h-32 bg-gray-100 rounded-md mb-3"></div>
            <h3 class="font-medium text-gray-800 mb-1">Producto recomendado 1</h3>
            <p class="text-gray-600 text-sm mb-2">$25.000</p>
            <button 
              class="w-full bg-gray-900 text-white py-2 px-4 rounded-md text-sm hover:bg-gray-800 transition-colors"
              onclick="addToCart('rec1', 'Producto recomendado 1', 25000)"
            >
              Agregar al carrito
            </button>
          </div>
          
          <div class="bg-white rounded-lg border p-4">
            <div class="w-full h-32 bg-gray-100 rounded-md mb-3"></div>
            <h3 class="font-medium text-gray-800 mb-1">Producto recomendado 2</h3>
            <p class="text-gray-600 text-sm mb-2">$35.000</p>
            <button 
              class="w-full bg-gray-900 text-white py-2 px-4 rounded-md text-sm hover:bg-gray-800 transition-colors"
              onclick="addToCart('rec2', 'Producto recomendado 2', 35000)"
            >
              Agregar al carrito
            </button>
          </div>

          <div class="bg-white rounded-lg border p-4">
            <div class="w-full h-32 bg-gray-100 rounded-md mb-3"></div>
            <h3 class="font-medium text-gray-800 mb-1">Producto recomendado 3</h3>
            <p class="text-gray-600 text-sm mb-2">$45.000</p>
            <button 
              class="w-full bg-gray-900 text-white py-2 px-4 rounded-md text-sm hover:bg-gray-800 transition-colors"
              onclick="addToCart('rec3', 'Producto recomendado 3', 45000)"
            >
              Agregar al carrito
            </button>
          </div>

          <div class="bg-white rounded-lg border p-4">
            <div class="w-full h-32 bg-gray-100 rounded-md mb-3"></div>
            <h3 class="font-medium text-gray-800 mb-1">Producto recomendado 4</h3>
            <p class="text-gray-600 text-sm mb-2">$55.000</p>
            <button 
              class="w-full bg-gray-900 text-white py-2 px-4 rounded-md text-sm hover:bg-gray-800 transition-colors"
              onclick="addToCart('rec4', 'Producto recomendado 4', 55000)"
            >
              Agregar al carrito
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- ‚úÖ SCRIPT CORREGIDO SIN ERRORES TYPESCRIPT + FORMATEO ARREGLADO -->
  <script>
    // ‚úÖ FIX PARA carrito.astro - Corregir errores TypeScript

console.log('üõí Inicializando carrito...');

// ‚úÖ DECLARACIONES GLOBALES PARA TYPESCRIPT
declare global {
  interface Window {
    addToCart: (id: string, name: string, price: number, quantity?: number) => void;
    addProductToCart: (id: string, name: string, price: number, image: string, category: string, buttonElement?: HTMLElement) => void;
    updateItemQuantity: (itemId: string, quantity: number) => void;
    removeItem: (itemId: string) => void;
    clearCart: () => void;
  }
}

// ‚úÖ CONSTANTES
const CART_KEY = 'martek-cart';

// ‚úÖ FUNCI√ìN GLOBAL ADDTOCART CORREGIDA
window.addToCart = function(id: string, name: string, price: number, quantity: number = 1): void {
  console.log('‚ûï addToCart llamada:', { id, name, price, quantity });
  
  try {
    // ‚úÖ VALIDACI√ìN DE PAR√ÅMETROS
    if (!id || !name || typeof price !== 'number' || isNaN(price)) {
      console.error('‚ùå Par√°metros inv√°lidos:', { id, name, price });
      return;
    }
    
    const validPrice = price > 0 ? price : 0;
    const validQuantity = typeof quantity === 'number' && quantity > 0 ? quantity : 1;
    
    // ‚úÖ OBTENER CARRITO ACTUAL
    const stored = localStorage.getItem(CART_KEY);
    let cartItems = stored ? JSON.parse(stored) : [];
    
    // ‚úÖ BUSCAR SI YA EXISTE
    const existingIndex = cartItems.findIndex((item: any) => item.product_id === id);
    
    if (existingIndex >= 0) {
      // Actualizar cantidad
      cartItems[existingIndex].quantity += validQuantity;
      cartItems[existingIndex].updated_at = new Date().toISOString();
      console.log('üì¶ Cantidad actualizada:', cartItems[existingIndex]);
    } else {
      // ‚úÖ CREAR NUEVO ITEM CON ESTRUCTURA CORRECTA
      const newItem = {
        id: `temp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        product_id: id,
        user_id: null,
        quantity: validQuantity,
        product_name: name,      // ‚úÖ CAMPO CORRECTO
        product_price: validPrice, // ‚úÖ CAMPO CORRECTO
        product_image: null,
        product_category: '',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      cartItems.push(newItem);
      console.log('‚ûï Nuevo item creado:', newItem);
    }
    
    // ‚úÖ GUARDAR EN LOCALSTORAGE
    localStorage.setItem(CART_KEY, JSON.stringify(cartItems));
    
    // ‚úÖ DISPARAR EVENTOS
    window.dispatchEvent(new CustomEvent('cart-updated', { 
      detail: { items: cartItems } 
    }));
    
    // ‚úÖ ACTUALIZAR UI
    updateCartDisplay();
    
    // ‚úÖ MOSTRAR NOTIFICACI√ìN
    showCartNotification(`${name} agregado al carrito`, 'success');
    
    console.log('‚úÖ Producto agregado exitosamente al carrito');
    
  } catch (error) {
    console.error('‚ùå Error en addToCart:', error);
    showCartNotification('Error agregando producto', 'error');
  }
};

// ‚úÖ FUNCI√ìN ADDPRODUCTTOCART PARA COMPATIBILIDAD
window.addProductToCart = function(id: string, name: string, price: number, image: string, category: string, buttonElement?: HTMLElement): void {
  console.log('‚ûï addProductToCart llamada:', { id, name, price });
  
  // Llamar a addToCart con los par√°metros correctos
  window.addToCart(id, name, price, 1);
  
  // ‚úÖ FEEDBACK VISUAL EN BOT√ìN
  if (buttonElement) {
    const originalText = buttonElement.textContent;
    const originalClass = buttonElement.className;
    
    buttonElement.textContent = '¬°Agregado!';
    buttonElement.className = originalClass.replace(/bg-gray-\d+/, 'bg-green-600');
    (buttonElement as any).disabled = true;
    
    setTimeout(() => {
      buttonElement.textContent = originalText;
      buttonElement.className = originalClass;
      (buttonElement as any).disabled = false;
    }, 1500);
  }
};

// ‚úÖ FUNCI√ìN PARA ACTUALIZAR DISPLAY DEL CARRITO
function updateCartDisplay(): void {
  try {
    const cartItems = JSON.parse(localStorage.getItem(CART_KEY) || '[]');
    
    // Actualizar contador
    const totalItems = cartItems.reduce((sum: number, item: any) => sum + (item.quantity || 0), 0);
    const counters = document.querySelectorAll('[data-cart-counter]');
    counters.forEach(counter => {
      (counter as HTMLElement).textContent = totalItems.toString();
      if (totalItems > 0) {
        counter.classList.remove('hidden');
        counter.classList.add('flex');
      } else {
        counter.classList.add('hidden');
        counter.classList.remove('flex');
      }
    });
    
    // Actualizar p√°gina de carrito si estamos en ella
    renderCartPage();
    
  } catch (error) {
    console.error('Error updating cart display:', error);
  }
}

// ‚úÖ FUNCI√ìN PARA RENDERIZAR P√ÅGINA DE CARRITO
function renderCartPage(): void {
  if (!window.location.pathname.includes('/carrito')) return;
  
  try {
    const cartItems = JSON.parse(localStorage.getItem(CART_KEY) || '[]');
    const emptyCart = document.getElementById('empty-cart');
    const cartContent = document.getElementById('cart-content');
    const cartItemsContainer = document.getElementById('cart-items');
    
    console.log('üîÑ Renderizando carrito:', cartItems.length, 'items');
    
    if (cartItems.length === 0) {
      if (emptyCart) emptyCart.classList.remove('hidden');
      if (cartContent) cartContent.classList.add('hidden');
      return;
    }
    
    if (emptyCart) emptyCart.classList.add('hidden');
    if (cartContent) cartContent.classList.remove('hidden');
    
    // ‚úÖ RENDERIZAR ITEMS
    if (cartItemsContainer) {
      cartItemsContainer.innerHTML = cartItems.map((item: any) => {
        const name = item.product_name || 'Producto sin nombre';
        const price = typeof item.product_price === 'number' && !isNaN(item.product_price) ? item.product_price : 0;
        const quantity = typeof item.quantity === 'number' && !isNaN(item.quantity) ? item.quantity : 1;
        const subtotal = price * quantity;
        
        return `
          <div class="flex items-center space-x-4 p-4 bg-white rounded-lg border" data-item-id="${item.id}">
            <div class="w-16 h-16 bg-gray-100 rounded-md flex-shrink-0 overflow-hidden">
              ${item.product_image ? `
                <img src="${item.product_image}" alt="${name}" class="w-full h-full object-cover">
              ` : `
                <div class="w-full h-full bg-gray-200 flex items-center justify-center">
                  <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"/>
                  </svg>
                </div>
              `}
            </div>
            
            <div class="flex-1 min-w-0">
              <h4 class="text-sm font-medium text-gray-800 truncate">${name}</h4>
              <p class="text-sm text-gray-500">${formatPrice(price)}</p>
              ${item.product_category ? `
                <p class="text-xs text-gray-400">${item.product_category}</p>
              ` : ''}
            </div>
            
            <div class="flex items-center space-x-2">
              <button onclick="window.updateItemQuantity('${item.id}', ${quantity - 1})"
                      class="w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center hover:bg-gray-50 transition-colors ${quantity <= 1 ? 'opacity-50 cursor-not-allowed' : ''}"
                      ${quantity <= 1 ? 'disabled' : ''}>
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"/>
                </svg>
              </button>
              
              <span class="w-8 text-center text-sm font-medium">${quantity}</span>
              
              <button onclick="window.updateItemQuantity('${item.id}', ${quantity + 1})"
                      class="w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center hover:bg-gray-50 transition-colors">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                </svg>
              </button>
            </div>
            
            <div class="text-right">
              <p class="text-sm font-medium text-gray-800">
                ${formatPrice(subtotal)}
              </p>
              <button onclick="window.removeItem('${item.id}')"
                      class="text-red-600 hover:text-red-800 text-sm mt-1 transition-colors">
                Eliminar
              </button>
            </div>
          </div>
        `;
      }).join('');
    }
    
    // ‚úÖ RENDERIZAR RESUMEN
    renderCartSummary(cartItems);
    
  } catch (error) {
    console.error('Error rendering cart page:', error);
  }
}

// ‚úÖ FUNCI√ìN PARA FORMATEAR PRECIOS
function formatPrice(price: number): string {
  try {
    const validPrice = typeof price === 'number' && !isNaN(price) ? price : 0;
    return new Intl.NumberFormat('es-CO', {
      style: 'currency',
      currency: 'COP',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(validPrice);
  } catch (error) {
    return `$${price || 0}`;
  }
}

// ‚úÖ FUNCI√ìN PARA RENDERIZAR RESUMEN
function renderCartSummary(cartItems: any[]): void {
  const summaryContainer = document.getElementById('cart-summary');
  if (!summaryContainer) return;
  
  const subtotal = cartItems.reduce((total: number, item: any) => {
    const price = typeof item.product_price === 'number' && !isNaN(item.product_price) ? item.product_price : 0;
    const quantity = typeof item.quantity === 'number' && !isNaN(item.quantity) ? item.quantity : 0;
    return total + (price * quantity);
  }, 0);
  
  const shipping = subtotal > 100000 ? 0 : 15000;
  const tax = subtotal * 0.19;
  const total = subtotal + shipping + tax;
  const totalItems = cartItems.reduce((sum: number, item: any) => sum + (item.quantity || 0), 0);
  
  summaryContainer.innerHTML = `
    <div class="bg-white rounded-lg border p-6">
      <h3 class="text-lg font-medium text-gray-800 mb-4">Resumen del pedido</h3>
      
      <div class="space-y-3 mb-6">
        <div class="flex justify-between text-sm">
          <span>Productos (${totalItems})</span>
          <span>${formatPrice(subtotal)}</span>
        </div>
        <div class="flex justify-between text-sm">
          <span>Env√≠o</span>
          <span class="${shipping === 0 ? 'text-green-600 font-medium' : ''}">${shipping === 0 ? 'Gratis' : formatPrice(shipping)}</span>
        </div>
        <div class="flex justify-between text-sm">
          <span>IVA (19%)</span>
          <span>${formatPrice(tax)}</span>
        </div>
        <div class="border-t pt-3 flex justify-between font-medium text-lg">
          <span>Total</span>
          <span>${formatPrice(total)}</span>
        </div>
      </div>

      <div class="space-y-3">
        <a href="/checkout" 
           class="w-full bg-gray-900 text-white py-3 px-4 rounded-md hover:bg-gray-800 transition-colors text-center block font-medium">
          Proceder al checkout
        </a>
        <button onclick="window.clearCart()" 
                class="w-full border border-gray-300 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-50 transition-colors">
          Vaciar carrito
        </button>
      </div>
    </div>
  `;
}

// ‚úÖ FUNCIONES AUXILIARES
window.updateItemQuantity = function(itemId: string, newQuantity: number): void {
  if (newQuantity <= 0) {
    window.removeItem(itemId);
    return;
  }
  
  try {
    const cartItems = JSON.parse(localStorage.getItem(CART_KEY) || '[]');
    const updatedItems = cartItems.map((item: any) =>
      item.id === itemId
        ? { ...item, quantity: newQuantity, updated_at: new Date().toISOString() }
        : item
    );
    
    localStorage.setItem(CART_KEY, JSON.stringify(updatedItems));
    updateCartDisplay();
  } catch (error) {
    console.error('Error updating quantity:', error);
  }
};

window.removeItem = function(itemId: string): void {
  try {
    const cartItems = JSON.parse(localStorage.getItem(CART_KEY) || '[]');
    const filteredItems = cartItems.filter((item: any) => item.id !== itemId);
    
    localStorage.setItem(CART_KEY, JSON.stringify(filteredItems));
    updateCartDisplay();
    showCartNotification('Producto removido', 'info');
  } catch (error) {
    console.error('Error removing item:', error);
  }
};

window.clearCart = function(): void {
  localStorage.removeItem(CART_KEY);
  updateCartDisplay();
  showCartNotification('Carrito vaciado', 'info');
};

// ‚úÖ FUNCI√ìN DE NOTIFICACIONES
function showCartNotification(message: string, type: 'success' | 'error' | 'info' = 'success'): void {
  const existing = document.querySelectorAll('.cart-notification');
  existing.forEach(n => n.remove());
  
  const notification = document.createElement('div');
  notification.className = `cart-notification fixed top-4 right-4 z-50 px-6 py-4 rounded-lg shadow-lg border max-w-sm transform transition-all duration-300`;
  
  switch (type) {
    case 'success':
      notification.className += ' bg-green-50 border-green-200 text-green-800';
      break;
    case 'error':
      notification.className += ' bg-red-50 border-red-200 text-red-800';
      break;
    case 'info':
      notification.className += ' bg-blue-50 border-blue-200 text-blue-800';
      break;
  }
  
  notification.innerHTML = `
    <div class="flex items-center justify-between">
      <span class="text-sm font-medium">${message}</span>
      <button onclick="this.parentElement.parentElement.remove()" class="ml-3 opacity-50 hover:opacity-100">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
      </button>
    </div>
  `;
  
  document.body.appendChild(notification);
  setTimeout(() => notification.remove(), 3000);
}

// ‚úÖ INICIALIZACI√ìN
document.addEventListener('DOMContentLoaded', function() {
  console.log('‚úÖ Sistema de carrito inicializado');
  updateCartDisplay();
  
  // Escuchar cambios de storage
  window.addEventListener('storage', function(e) {
    if (e.key === CART_KEY) {
      updateCartDisplay();
    }
  });
});
  </script>
</Layout>