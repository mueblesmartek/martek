---
// src/components/layout/Layout.astro - LAYOUT H√çBRIDO A+B
import Header from './Header.astro';
import Footer from './Footer.astro';
import { GlobalCart } from '../react/Cart';

export interface Props {
  title: string;
  description?: string;
  image?: string;
  noIndex?: boolean;
}

const { 
  title, 
  description = "Martek - Bases para camas de alta calidad. M√°s de 45 a√±os de experiencia en muebles.", 
  image = "/images/og-default.jpg",
  noIndex = false 
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  
  <!-- SEO Meta Tags -->
  <title>{title}</title>
  <meta name="description" content={description} />
  <link rel="canonical" href={canonicalURL} />
  
  <!-- Open Graph / Facebook -->
  <meta property="og:type" content="website" />
  <meta property="og:url" content={canonicalURL} />
  <meta property="og:title" content={title} />
  <meta property="og:description" content={description} />
  <meta property="og:image" content={new URL(image, Astro.url)} />
  
  <!-- Twitter -->
  <meta property="twitter:card" content="summary_large_image" />
  <meta property="twitter:url" content={canonicalURL} />
  <meta property="twitter:title" content={title} />
  <meta property="twitter:description" content={description} />
  <meta property="twitter:image" content={new URL(image, Astro.url)} />
  
  <!-- Robots -->
  {noIndex && <meta name="robots" content="noindex, nofollow" />}
  
  <!-- Favicon -->
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <link rel="icon" type="image/png" href="/favicon.png" />
  
  <!-- üöÄ SOLUCI√ìN A: CART.JS EN HEAD - M√ÅXIMA PRIORIDAD -->
  <script src="/js/cart.js" is:inline></script>
  
  <!-- üöÄ SOLUCI√ìN B: EVENT SYSTEM - DESPU√âS DE CART.JS -->
  <script is:inline>
    // üéØ SISTEMA DE EVENTOS H√çBRIDO - GARANTIZA DISPONIBILIDAD
    (function() {
      console.log('üõèÔ∏è Martek - Iniciando sistema h√≠brido...');
      
      // Flag para evitar m√∫ltiples ejecuciones
      if (window.MARTEK_EVENT_SYSTEM_LOADED) {
        console.log('üîÑ Sistema de eventos ya cargado');
        return;
      }
      window.MARTEK_EVENT_SYSTEM_LOADED = true;
      
      // üéØ FUNCI√ìN DE VERIFICACI√ìN ROBUSTA
      function checkCartAvailability() {
        const checks = {
          CartAPI: typeof window.CartAPI !== 'undefined',
          addToCart: typeof window.addToCart === 'function',
          CartManager: typeof window.CartManager !== 'undefined',
          updateCartCounter: typeof window.updateCartCounter === 'function'
        };
        
        // Necesitamos al menos CartAPI O addToCart
        const isAvailable = checks.CartAPI || checks.addToCart;
        
        if (isAvailable) {
          console.log('‚úÖ Sistema de carrito verificado:', checks);
        }
        
        return isAvailable;
      }
      
      // üéØ DISPATCHER DE EVENTOS
      function dispatchCartReady() {
        console.log('üì° Disparando evento cart-ready...');
        
        // Evento personalizado con detalles
        const cartReadyEvent = new CustomEvent('cart-ready', {
          detail: {
            timestamp: Date.now(),
            cartAPI: !!window.CartAPI,
            addToCart: !!window.addToCart,
            cartManager: !!window.CartManager
          }
        });
        
        window.dispatchEvent(cartReadyEvent);
        
        // Tambi√©n disparar eventos compatibles
        window.dispatchEvent(new CustomEvent('cart-system-ready'));
        window.dispatchEvent(new CustomEvent('martek-cart-ready'));
        
        console.log('‚úÖ Eventos de carrito listo disparados');
      }
      
      // üéØ FUNCI√ìN HELPER GLOBAL
      window.waitForCart = function(timeout = 10000) {
        return new Promise((resolve) => {
          if (checkCartAvailability()) {
            resolve(true);
            return;
          }
          
          console.log('‚è≥ Esperando evento cart-ready...');
          
          const timeoutId = setTimeout(() => {
            console.warn('‚ö†Ô∏è Timeout esperando cart-ready');
            resolve(false);
          }, timeout);
          
          window.addEventListener('cart-ready', function() {
            clearTimeout(timeoutId);
            resolve(true);
          }, { once: true });
        });
      };
      
      // üéØ FUNCI√ìN SAFE ADD TO CART GLOBAL
      window.safeAddToCart = async function(productId, productName, productPrice, quantity = 1) {
        const isReady = await window.waitForCart(5000);
        
        if (!isReady) {
          console.error('‚ùå Carrito no disponible para agregar producto');
          alert('Error: Sistema de carrito no disponible. Por favor, recarga la p√°gina.');
          return false;
        }
        
        try {
          // Intentar m√∫ltiples m√©todos
          if (typeof window.addToCart === 'function') {
            window.addToCart(productId, productName, productPrice, quantity);
            return true;
          } else if (window.CartAPI && typeof window.CartAPI.addProduct === 'function') {
            return window.CartAPI.addProduct({
              product_id: productId,
              product_name: productName,
              product_price: productPrice,
              quantity: quantity
            });
          } else if (window.CartManager && typeof window.CartManager.addItem === 'function') {
            return window.CartManager.addItem(productId, productName, productPrice, quantity);
          }
          
          throw new Error('No se encontr√≥ m√©todo para agregar al carrito');
          
        } catch (error) {
          console.error('‚ùå Error agregando al carrito:', error);
          alert('Error agregando al carrito. Por favor, intenta de nuevo.');
          return false;
        }
      };
      
      // üéØ INICIALIZACI√ìN INMEDIATA O ESPERA
      function initializeEventSystem() {
        if (checkCartAvailability()) {
          // Cart ya disponible, disparar inmediatamente
          console.log('‚úÖ Cart disponible inmediatamente');
          dispatchCartReady();
        } else {
          // Esperar a que cart.js se inicialice
          console.log('‚è≥ Esperando inicializaci√≥n de cart.js...');
          
          let attempts = 0;
          const maxAttempts = 100; // 10 segundos max
          
          const checkInterval = setInterval(() => {
            attempts++;
            
            if (checkCartAvailability()) {
              clearInterval(checkInterval);
              dispatchCartReady();
            } else if (attempts >= maxAttempts) {
              clearInterval(checkInterval);
              console.error('‚ùå Timeout: cart.js no se inicializ√≥');
              
              // Disparar evento de error
              window.dispatchEvent(new CustomEvent('cart-error', {
                detail: { error: 'Timeout esperando cart.js' }
              }));
            }
          }, 100);
        }
      }
      
      // üéØ EJECUTAR CUANDO DOM EST√â LISTO
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeEventSystem);
      } else {
        // DOM ya listo, ejecutar inmediatamente
        initializeEventSystem();
      }
      
    })();
  </script>
  
  <!-- Estilos cr√≠ticos inline -->
  <style>
    *,*::before,*::after{box-sizing:border-box;}
    html{font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans",sans-serif;line-height:1.5;}
    body{margin:0;line-height:inherit;}
    .loading{opacity:0.5;pointer-events:none;}
    .fade-in{animation:fadeIn 0.3s ease-in-out;}
    @keyframes fadeIn{from{opacity:0;}to{opacity:1;}}
    
    /* Colores Martek: Gris, Rojo, Blanco */
    :root {
      --martek-red: #DC2626;
      --martek-red-hover: #B91C1C;
      --martek-gray: #6B7280;
      --martek-dark-gray: #374151;
      --martek-light-gray: #F3F4F6;
    }
  </style>
</head>

<body class="bg-white text-gray-800 antialiased">
  
  <!-- Header -->
  <Header />
  
  <!-- Main Content -->
  <main id="main-content" class="min-h-screen">
    <slot />
  </main>
  
  <!-- Footer -->
  <Footer />

  <!-- ‚úÖ CARRITO GLOBAL - AHORA USA EVENTOS -->
  <GlobalCart client:load />

  <!-- ‚úÖ VERIFICACI√ìN FINAL Y DEBUG -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      console.log('üéâ Layout completamente cargado');
      
      // Verificar que el sistema de eventos est√© funcionando
      window.addEventListener('cart-ready', function(event) {
        console.log('‚úÖ Layout recibi√≥ evento cart-ready:', event.detail);
      });
      
      window.addEventListener('cart-error', function(event) {
        console.error('‚ùå Layout recibi√≥ evento cart-error:', event.detail);
      });
      
      // Debug info despu√©s de 2 segundos
      setTimeout(() => {
        console.log('üêõ DEBUG - Estado final:');
        console.log('  - waitForCart:', typeof window.waitForCart);
        console.log('  - safeAddToCart:', typeof window.safeAddToCart);
        console.log('  - CartAPI:', typeof window.CartAPI);
        console.log('  - addToCart:', typeof window.addToCart);
      }, 2000);
    });
  </script>
</body>
</html>