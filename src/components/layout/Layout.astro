---
// src/components/layout/Layout.astro - LAYOUT MARTEK CON CARRITO
import Header from './Header.astro';
import Footer from './Footer.astro';
import { GlobalCart } from '../react/Cart';

export interface Props {
  title: string;
  description?: string;
  image?: string;
  noIndex?: boolean;
}

const { 
  title, 
  description = "Martek - Bases para camas de alta calidad. M√°s de 45 a√±os de experiencia en muebles.", 
  image = "/images/og-default.jpg",
  noIndex = false 
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  
  <!-- SEO Meta Tags -->
  <title>{title}</title>
  <meta name="description" content={description} />
  <link rel="canonical" href={canonicalURL} />
  
  <!-- Open Graph / Facebook -->
  <meta property="og:type" content="website" />
  <meta property="og:url" content={canonicalURL} />
  <meta property="og:title" content={title} />
  <meta property="og:description" content={description} />
  <meta property="og:image" content={new URL(image, Astro.url)} />
  
  <!-- Twitter -->
  <meta property="twitter:card" content="summary_large_image" />
  <meta property="twitter:url" content={canonicalURL} />
  <meta property="twitter:title" content={title} />
  <meta property="twitter:description" content={description} />
  <meta property="twitter:image" content={new URL(image, Astro.url)} />
  
  <!-- Robots -->
  {noIndex && <meta name="robots" content="noindex, nofollow" />}
  
  <!-- Favicon -->
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <link rel="icon" type="image/png" href="/favicon.png" />
  
  <!-- Estilos cr√≠ticos inline -->
  <style>
    *,*::before,*::after{box-sizing:border-box;}
    html{font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans",sans-serif;line-height:1.5;}
    body{margin:0;line-height:inherit;}
    .loading{opacity:0.5;pointer-events:none;}
    .fade-in{animation:fadeIn 0.3s ease-in-out;}
    @keyframes fadeIn{from{opacity:0;}to{opacity:1;}}
    
    /* Colores Martek: Gris, Rojo, Blanco */
    :root {
      --martek-red: #DC2626;
      --martek-red-hover: #B91C1C;
      --martek-gray: #6B7280;
      --martek-dark-gray: #374151;
      --martek-light-gray: #F3F4F6;
    }
  </style>
</head>

<body class="bg-white text-gray-800 antialiased">
  
  <!-- Header -->
  <Header />
  
  <!-- Main Content -->
  <main id="main-content" class="min-h-screen">
    <slot />
  </main>
  
  <!-- Footer -->
  <Footer />

  <!-- ‚úÖ CARRITO GLOBAL CON HYDRATION FORZADA -->
  <div id="global-cart-mount-point"></div>

  <!-- ‚úÖ SCRIPT PRINCIPAL - CART + HYDRATION FIX -->
  <script is:inline>
    // üîß FLAG GLOBAL PARA EVITAR CARGA DOBLE
    if (!window.MARTEK_CART_LOADING && !window.MARTEK_CART_LOADED) {
      window.MARTEK_CART_LOADING = true;
      
      console.log('üõèÔ∏è Martek - Iniciando carga de carrito...');
      
      // ‚úÖ FUNCI√ìN HELPER PARA ESPERAR CARRITO
      function waitForCartReady(maxAttempts = 100) {
        return new Promise((resolve) => {
          let attempts = 0;
          
          const checkCart = () => {
            attempts++;
            
            const hasCartAPI = typeof window.CartAPI !== 'undefined';
            const hasAddToCart = typeof window.addToCart === 'function';
            const hasCartLoaded = window.MARTEK_CART_LOADED === true;
            
            if ((hasCartAPI || hasAddToCart) || hasCartLoaded) {
              console.log('‚úÖ Sistema de carrito detectado');
              window.MARTEK_CART_LOADED = true;
              resolve(true);
            } else if (attempts >= maxAttempts) {
              console.warn('‚ö†Ô∏è Timeout esperando carrito despu√©s de', attempts * 100, 'ms');
              resolve(false);
            } else {
              setTimeout(checkCart, 100);
            }
          };
          
          checkCart();
        });
      }
      
      // ‚úÖ CARGAR CART.JS DE FORMA SEGURA
      function loadCartScript() {
        return new Promise((resolve, reject) => {
          const existingScript = document.querySelector('script[src="/js/cart.js"]');
          if (existingScript) {
            console.log('üîÑ cart.js ya existe, esperando carga...');
            resolve(true);
            return;
          }
          
          console.log('üì¶ Cargando cart.js...');
          const script = document.createElement('script');
          script.src = '/js/cart.js';
          script.async = false;
          
          script.onload = () => {
            console.log('‚úÖ cart.js cargado exitosamente');
            window.MARTEK_CART_LOADED = true;
            resolve(true);
          };
          
          script.onerror = (error) => {
            console.error('‚ùå Error cargando cart.js:', error);
            reject(error);
          };
          
          document.head.appendChild(script);
        });
      }
      
      // üîß FORZAR HIDRATACI√ìN DE REACT COMPONENTS
      async function forceReactHydration() {
        console.log('üîÑ Iniciando hidrataci√≥n forzada de React...');
        
        try {
          // Cargar React y ReactDOM
          const [React, ReactDOM] = await Promise.all([
            import('react'),
            import('react-dom/client')
          ]);
          
          console.log('‚úÖ React y ReactDOM cargados');
          
          // Esperar un poco para que el DOM est√© completamente listo
          await new Promise(resolve => setTimeout(resolve, 500));
          
          // Montar GlobalCart manualmente
          const cartContainer = document.getElementById('global-cart-mount-point');
          if (cartContainer) {
            try {
              const { GlobalCart } = await import('../components/react/Cart');
              const root = ReactDOM.createRoot(cartContainer);
              root.render(React.createElement(GlobalCart));
              console.log('‚úÖ GlobalCart hidratado manualmente');
            } catch (error) {
              console.error('‚ùå Error hidratando GlobalCart:', error);
            }
          }
          
          // Verificar y forzar hidrataci√≥n de otros componentes React
          const reactComponents = document.querySelectorAll('[data-astro-component]');
          console.log(`üîÑ Encontrados ${reactComponents.length} componentes Astro para hidratar`);
          
          // Disparar evento personalizado para despertar componentes
          window.dispatchEvent(new CustomEvent('astro:hydration-force', {
            detail: { timestamp: Date.now() }
          }));
          
          // Trigger de eventos para componentes que podr√≠an estar esperando
          setTimeout(() => {
            window.dispatchEvent(new CustomEvent('astro:page-load'));
            window.dispatchEvent(new CustomEvent('DOMContentLoaded'));
          }, 100);
          
        } catch (error) {
          console.error('‚ùå Error en hidrataci√≥n forzada:', error);
        }
      }
      
      // ‚úÖ INICIALIZACI√ìN PRINCIPAL
      document.addEventListener('DOMContentLoaded', async function() {
        try {
          console.log('üöÄ Iniciando secuencia de carga...');
          
          // 1. Cargar cart.js
          await loadCartScript();
          
          // 2. Esperar a que se inicialice
          const cartReady = await waitForCartReady();
          
          if (cartReady) {
            console.log('‚úÖ Layout: Sistema de carrito inicializado');
            
            // 3. Crear helpers globales
            window.waitForCartAPI = () => waitForCartReady(50);
            
            window.safeAddToCart = async function(productId, productName, productPrice, quantity = 1) {
              const ready = await waitForCartReady(30);
              
              if (ready) {
                if (typeof window.addToCart === 'function') {
                  window.addToCart(productId, productName, productPrice, quantity);
                  return true;
                } else if (window.CartAPI && typeof window.CartAPI.addProduct === 'function') {
                  return window.CartAPI.addProduct({
                    product_id: productId,
                    product_name: productName,
                    product_price: productPrice,
                    quantity: quantity
                  });
                }
              }
              
              console.error('No se pudo agregar al carrito - sistema no disponible');
              alert('Error: Sistema de carrito no disponible. Por favor, recarga la p√°gina.');
              return false;
            };
            
            // 4. Disparar eventos de carrito listo
            console.log('üì° Disparando eventos de carrito listo...');
            window.dispatchEvent(new CustomEvent('cart-system-ready', {
              detail: { 
                timestamp: Date.now(),
                cartAPI: !!window.CartAPI,
                addToCart: !!window.addToCart
              }
            }));
            
            // 5. Forzar hidrataci√≥n de React (FIX PRINCIPAL)
            await forceReactHydration();
            
            console.log('üéâ Inicializaci√≥n completa - cart + React hidratado');
            
          } else {
            console.error('‚ùå Sistema de carrito no se pudo inicializar');
            
            // Fallback functions
            window.safeAddToCart = async function() {
              alert('Sistema de carrito no disponible. Por favor, recarga la p√°gina.');
              return false;
            };
            
            window.waitForCartAPI = () => Promise.resolve(false);
          }
          
        } catch (error) {
          console.error('‚ùå Error en inicializaci√≥n:', error);
          
          // Fallback functions
          window.safeAddToCart = async function() {
            alert('Error del sistema. Por favor, recarga la p√°gina.');
            return false;
          };
          
          window.waitForCartAPI = () => Promise.resolve(false);
        }
      });
      
    } else {
      console.log('üîÑ Sistema de carrito ya cargado o en proceso');
    }
  </script>
</body>
</html>